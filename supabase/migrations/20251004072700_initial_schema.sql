-- Create Patients Table
CREATE TABLE public.patients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    phone TEXT NOT NULL,
    email TEXT,
    observations TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Procedures Table
CREATE TABLE public.procedures (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    value NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Dentists Table (as a profile for auth.users)
CREATE TABLE public.dentists (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    cro INTEGER NOT NULL,
    name TEXT NOT NULL,
    email TEXT,
    phone TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create Appointments Table
CREATE TABLE public.appointments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_dentist UUID NOT NULL REFERENCES public.dentists(id),
    id_patient BIGINT NOT NULL REFERENCES public.patients(id),
    id_procedure BIGINT NOT NULL REFERENCES public.procedures(id),
    date TIMESTAMPTZ NOT NULL,
    observations TEXT,
    payment_method TEXT,
    payment_date DATE,
    status TEXT NOT NULL DEFAULT 'Scheduled',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Function to create a dentist profile on new user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.dentists (id, name, cro, phone, email)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'full_name',
        (new.raw_user_meta_data->>'cro')::INTEGER,
        new.raw_user_meta_data->>'phone',
        new.email
    );
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to call the function on new user creation
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Enable Row Level Security (RLS) for all tables
ALTER TABLE public.patients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.procedures ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.dentists ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.appointments ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Dentists can see their own profile
CREATE POLICY "Dentists can view their own profile"
ON public.dentists FOR SELECT
USING (auth.uid() = id);

-- Authenticated users can see all patients (simplification for now)
CREATE POLICY "Authenticated users can view patients"
ON public.patients FOR SELECT
USING (auth.role() = 'authenticated');

-- Authenticated users can create patients
CREATE POLICY "Authenticated users can create patients"
ON public.patients FOR INSERT
WITH CHECK (auth.role() = 'authenticated');

-- Authenticated users can see all procedures
CREATE POLICY "Authenticated users can view procedures"
ON public.procedures FOR SELECT
USING (auth.role() = 'authenticated');

-- Dentists can see their own appointments
CREATE POLICY "Dentists can view their own appointments"
ON public.appointments FOR SELECT
USING (auth.uid() = id_dentist);

-- Dentists can create appointments for themselves
CREATE POLICY "Dentists can create their own appointments"
ON public.appointments FOR INSERT
WITH CHECK (auth.uid() = id_dentist);

-- Dentists can update their own appointments
CREATE POLICY "Dentists can update their own appointments"
ON public.appointments FOR UPDATE
USING (auth.uid() = id_dentist);